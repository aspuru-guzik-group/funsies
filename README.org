*Funsies* is a typed python library to build reproducible, composable and
data-persistent computational workflows described entirely in Python. It uses
the minimal queuing library [[https://python-rq.org/][rq]] and it's own memoization / caching structures,
both backed by [[https://redis.io/][an in-memory, persistent redis server]]. 

* A little tour
** Building a workflow
In practice, using funsies looks like this:
#+BEGIN_SRC python
  from funsies import task, transformer
  from redis import Redis

  db = Redis()

  t1 = task(db, ["qchem params.in"], inp={"file.in": parameters}, out=["params.out"])
#+END_SRC
Tasks are simple shell commands with expected input and output files. All
input and output files are automatically saved in Redis.

Chaining tasks is simple,
#+BEGIN_SRC python
  t2 = task(
      db,
      ['grep "HOMO-LUMO ENERGY" myfile'],
      inp={"myfile": t1.outputs["params.out"]},
  )
#+END_SRC
The outputs from a task can immediately be used as inputs to other tasks, even
as none of the tasks have even started computing. This is because the "files"
are not actual populated values but pointers to (currently absent) data on the
redis server.

Python can also be used to do computations. Transformers are simple python
callables and can be used to transform database "files". Here we apply
a_python_function directly to the output of grep above,
#+BEGIN_SRC python
  t3 = transformer(db, a_python_function, inp=t2.commands[0].stdout)
#+END_SRC

** TODO Running the workflow
** TODO Results, memoization and persistence
* Why not x ?
(where x ∈ S, [[https://github.com/pditommaso/awesome-pipeline][awesome pipelining]] ∪ [[https://github.com/meirwah/awesome-workflow-engines][workflow codes]] ⊂ S)

I've created funsies because I wanted a pipelining code that is minimal,
typed, deployable on HPC resources (not dependent on docker, AWS, etc.) and
(most importantly) with *reproducible, persistent memoization*.

funsies is specifically built for the kind of workflows common in
computational chemistry. 


* TODO File input / output
* TODO queueing
